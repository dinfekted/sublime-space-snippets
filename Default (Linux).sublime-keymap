[
  {
    "keys": [","],
    "command": "insert_spaced_char",
    "args": {
      "char": ",",
      "remove_space_before_regexp": "\\s__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__(\\S|$)",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": [":"],
    "command": "insert_spaced_char",
    "args": {
      "char": ":",
      "remove_space_before_regexp": "(?<![=])\\s__CURSOR__",
      "insert_space_after_regexp": "(?<![:=])(?<![:=]\\s)__CURSOR__",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "not_regex_contains", "operand": "source\\.js"},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": [":"],
    "command": "insert_spaced_char",
    "args": {
      "char": ":",
      // "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "insert_space_after_regexp": "(?<![\\[])__CURSOR__(?!(\\s\\s|=))",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source\\.go(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": [">"],
    "command": "insert_spaced_char",
    "args": {
      "char": ">",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[>=]\\s*__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*>",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["<"],
    "command": "insert_spaced_char",
    "args": {
      "char": "<",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "<\\s*__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*<",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["*"],
    "command": "insert_spaced_char",
    "args": {
      "char": "*",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[<>&|*/+\\-]\\s*__CURSOR__",
      "insert_space_after_regexp": "(?<![=({\\[\\.])(?<![=({\\[\\.]\\s)__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["/"],
    "command": "insert_spaced_char",
    "args": {
      "char": "/",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[&|=*/+-]\\s*__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["/"],
    "command": "insert_spaced_char",
    "args": {
      "char": "=>",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[:=&|*/+-]\\s*__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "'\\s?$"},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source\\.(php|ruby)(?!.*(string|regexp|symbol|css))"},
    ]
  },


  {
    "keys": ["+"],
    "command": "insert_spaced_char",
    "args": {
      "char": "+",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[<>&|*/+\\-]\\s*__CURSOR__",
      "insert_space_after_regexp": "(?<![=({\\[\\.])(?<![=({\\[\\.]\\s)__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["-"],
    "command": "insert_spaced_char",
    "args": {
      "char": "-",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[<>&|*/+\\-]\\s*__CURSOR__",
      "insert_space_after_regexp": "(?<![=({\\[\\.])(?<![=({\\[\\.]\\s)__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(css|string|regexp|symbol))"},
    ]
  },

  {
    "keys": ["&"],
    "command": "insert_spaced_char",
    "args": {
      "char": "&",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[<>&|*/+\\-]\\s*__CURSOR__",
      "insert_space_after_regexp": "(?<![=({\\[\\.])(?<![=({\\[\\.]\\s)__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["|"],
    "command": "insert_spaced_char",
    "args": {
      "char": "|",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "remove_space_before_regexp": "[<>&|*/+\\-]\\s*__CURSOR__",
      "insert_space_after_regexp": "(?<![=({\\[])(?<![=({\\[]\\s)__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["="],
    "command": "insert_spaced_char",
    "args": {
      "char": "=",
      "insert_space_before_regexp": "[^\\s!]__CURSOR__",
      "remove_space_before_regexp": "[:=&|*/+\\-<>!\\.]\\s*__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__([^\\s]|\\s\\{|$)",
      "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["!"],
    "command": "insert_spaced_char",
    "args": {
      "char": "!",
      "insert_space_before_regexp": "[^\\(\\s!,]__CURSOR__",
      // "remove_space_before_regexp": "[:=&|*/+\\-<>]\\s*__CURSOR__",
      // "insert_space_after_regexp": "(?<![\\(,])__CURSOR__(?!(\\s\\s|=))",
      // "remove_space_after_regexp": "__CURSOR__\\s*[&|=*/+-]",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source(?!.*(string|regexp|symbol|css))"},
    ]
  },

  {
    "keys": ["."],
    "command": "insert_spaced_char",
    "args": {
      "char": ".",
      "insert_space_before_regexp": "[^<>\\s({\\[\\.|]__CURSOR__",
      "insert_space_after_regexp": "__CURSOR__",
    },
    "context": [
      {"key": "is_search_panel_enhanced_visible", "operator": "equal", "operand": false},
      {"key": "scope_part", "operator": "regex_contains", "operand": "source\\.php(?!.*(string|regexp|symbol|css))"},
      {"key": "preceding_text", "operator": "regex_contains", "operand": "\\s$"},
    ]
  },

]
